#!/bin/bash

# This script updates the system timezone and flux parameters based on the current IP geolocation
# The script gets triggered whenever the network interface status changes to 'up'
# It uses tzupdate for updating the timezone and xflux for adjusting the screen color temperature

IF=$1
STATUS=$2

username=$(who | awk '{print $1; exit}')

LOG_FILE="/home/$username/xflux_log.log"
OUTPUT_FILE="/home/$username/latlon.txt"

# display=$(who | grep -P '\(:[0-9](\.[0-9])?\)' | awk '{print $5}' | tr -d '()')
export DISPLAY=:0

log_message() {
    echo "$1" >> $LOG_FILE
}

update_timezone() { 
    log_message "tzupdate things"
    sudo tzupdate >> $LOG_FILE
    log_message "tzupdate command executed"
}

check_timezone_change() {
    current_timezone=$(tzupdate --print-system-timezone)
    suggested_timezone=$(tzupdate -p)
    [ "$current_timezone" != "$suggested_timezone" ]
}

check_lat_and_lon_are_valid() {
    local LAT=$1
    local LON=$2
    # Check if LAT or LON is not a valid number
    if [[ ! $LAT =~ ^-?[0-9]+([.][0-9]+)?$ ]] || [[ ! $LON =~ ^-?[0-9]+([.][0-9]+)?$ ]]; then
        return 1
    fi
    return 0
}

# Check the values in OUTPUT_FILE for validity
check_output_file_values() {
    if [ ! -f "$OUTPUT_FILE" ]; then
        return 1
    fi
    
    LAT=$(cat $OUTPUT_FILE | cut -d ',' -f 1)
    LON=$(cat $OUTPUT_FILE | cut -d ',' -f 2)
    
    check_lat_and_lon_are_valid $LAT $LON
    return $?
}

get_and_update_latlon() {
    LATLON=`curl -s https://ipinfo.io/loc 2>> $LOG_FILE`
    LAT=$(echo $LATLON | cut -d ',' -f 1)
    LON=$(echo $LATLON | cut -d ',' -f 2)
    current_timezone=$(tzupdate --print-system-timezone)

    check_lat_and_lon_are_valid $LAT $LON

    if [ $? -eq 1 ]; then
        log_message "The lat and lon read from the ipinfo.io were invalid."
        return
    fi
    
    echo "$LAT,$LON,$current_timezone" > $OUTPUT_FILE

    log_message "Latitude: $LAT, Longitude: $LON, Current timezone:$current_timezone"
}


get_current_location_info() {
    LATLON=$(curl -s https://ipinfo.io/loc 2>> $LOG_FILE)
    LAT=$(echo $LATLON | cut -d ',' -f 1)
    LON=$(echo $LATLON | cut -d ',' -f 2)
    check_lat_and_lon_are_valid $LAT $LON
    if [ $? -eq 1 ]; then
        log_message "The lat and lon read from the ipinfo.io were invalid."
        return 1
    fi
    CURRENT_TZ=$(curl -s https://ipinfo.io/timezone 2>> $LOG_FILE)
    log_message "Current location info: LAT=$LAT, LON=$LON, TZ=$CURRENT_TZ"
    return 0
}

kill_xflux() {
    killall -q xflux
    while true;
            do allxflux=$(pidof xflux);
            wtsp=" ";
            tmpxflux=${allxflux%%"$wtsp"*};
            allxflux=${allxflux#*"$wtsp"};
            case "$allxflux" in
                    *" "*)
                            kill -9 "$tmpxflux"  > /dev/null 2>&1;
                            continue;
                    ;;
                    *)
                            kill -9 "$tmpxflux"  > /dev/null 2>&1;
                            break;
                    ;;
            esac;
    done;
    log_message "xflux killed"
}

start_xflux() {
    LAT=$(cat $OUTPUT_FILE | cut -d ',' -f 1)
    LON=$(cat $OUTPUT_FILE | cut -d ',' -f 2)

    check_lat_and_lon_are_valid $LAT $LON

    if [ $? -eq 1 ]; then
        log_message "WARNING: The lat and lon read from the log file were invalid. Did not start xflux."
    else
        export XAUTHORITY=/home/$username/.Xauthority
        xflux -l $LAT -g $LON -k 2000 >> $LOG_FILE 2>&1 &
        log_message "New xflux started at latitude=$LAT, longitude=$LON"
    fi
}

location_exists_but_doesnt_match_timezone() {
    # Only when the timezone in latlon.txt OUTPUT_FILE differs from the current timezone,
    # that indicates the lat/lon are inappropriate, and xflux needs to be updated with new lat/lon.
    get_current_location_info
    if [ $? -ne 0 ]; then
        log_message "location_exists_but_doesnt_match_timezone: location info is not available"
        return 1  # False, since location info is not available
    fi

    XFLUX_TIMEZONE=$(cat $OUTPUT_FILE | cut -d ',' -f 3)
    CURRENT_TZ=$(tzupdate --print-system-timezone)
    log_message "XFLUX_TIMEZONE: ${XFLUX_TIMEZONE}, CURRENT_TZ: ${CURRENT_TZ}"

    if [ "$XFLUX_TIMEZONE" != "$CURRENT_TZ" ]; then
        log_message "location_exists_but_doesnt_match_timezone: mismatch in timezones!"
        return 0  # True, there is a mismatch
    else
        log_message "location_exists_but_doesnt_match_timezone: no mismatch in timezones"
        return 1  # False, no mismatch
    fi
}

if [ "$STATUS" = "up" ]; then

    # Create LOG_FILE if it doesn't exist
    [ ! -f "$LOG_FILE" ] && touch "$LOG_FILE"
    
    log_message " "
    log_message "---------------------------------------------------"
    log_message "Script update_timezone started at $(date)"
    log_message "Arguments passed to script: $0 $IF $STATUS"
    
    # we always try to update the timezone when networkmanager starts.
    update_timezone

    # If either the OUTPUT_FILE doesn't exist/contains invalid values or there's a timezone change:
    # update the timezone, fetch new lat/lon, kill existing xflux and start a new one
    if check_output_file_values; then
        log_message "check_output_file_values: true"
    else
        log_message "check_output_file_values: false"
    fi

    if check_timezone_change; then
        log_message "check_timezone_change: true"
    else
        log_message "check_timezone_change: false"
    fi
    if location_exists_but_doesnt_match_timezone; then
        log_message "Location exists but doesn't match timezone: true"
    else
        log_message "Location exists but doesn't match timezone: false"
    fi

    if ! check_output_file_values || check_timezone_change || location_exists_but_doesnt_match_timezone; then
        get_and_update_latlon
        kill_xflux
        start_xflux
        log_message "update_timezone finished at $(date)"
    else
        log_message "No timezone change detected and OUTPUT_FILE was set properly, skipping update."
    fi
    log_message "---------------------------------------------------"
    log_message " "

fi
