#!/bin/sh

# This script updates the system timezone and flux parameters based on the current IP geolocation
# The script gets triggered whenever the network interface status changes to 'up'
# It uses tzupdate for updating the timezone and xflux for adjusting the screen color temperature

IF=$1
STATUS=$2
LOG_FILE="$HOME/dispatcher.log"
OUTPUT_FILE="$HOME/latlon.txt"

log_message() {
    echo "$1" >> $LOG_FILE
}

update_timezone() {
    sudo tzupdate
    log_message "tzupdate command executed"
}

get_latlon() {
    LATLON=`curl -s https://ipinfo.io/loc`
    log_message "Latitude and Longitude: $LATLON"
    LAT=$(echo $LATLON | cut -d ',' -f 1)
    LON=$(echo $LATLON | cut -d ',' -f 2)
    echo "$LAT,$LON" > $OUTPUT_FILE
    log_message "Latitude: $LAT, Longitude: $LON"
}

kill_xflux() {
    while true;
        do allxflux=$(pidof xflux);
        wtsp=" ";
        tmpxflux=${allxflux%%"$wtsp"*};
        allxflux=${allxflux#*"$wtsp"};
        case "$allxflux" in
            *" "*)
                kill -9 "$tmpxflux";
                continue;
            ;;
            *)
                kill -9 "$tmpxflux";
                break;
            ;;
        esac;
    done;
    log_message "xflux killed"
}

restart_xflux() {
    LAT=$(cat $OUTPUT_FILE | cut -d ',' -f 1)
    LON=$(cat $OUTPUT_FILE | cut -d ',' -f 2)
    xflux -l $LAT -g $LON -k 2000 &
    log_message "New xflux started"
}

# Create files if not already created.
touch $LOG_FILE
touch $OUTPUT_FILE

log_message "Script started at $(date)"

if [ "$STATUS" = "up" ]; then
    update_timezone
    get_latlon
    kill_xflux
    restart_xflux
    log_message "Script finished at $(date)"
fi
